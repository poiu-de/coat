<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coat — Config of Annotated Types</title><link>https://poiu-de.github.io/coat/</link><description>Recent content on Coat — Config of Annotated Types</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://poiu-de.github.io/coat/index.xml" rel="self" type="application/rss+xml"/><item><title>Annotations</title><link>https://poiu-de.github.io/coat/docs/user_guide/01_annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/user_guide/01_annotations/</guid><description>Coat provides three annotations, a type-level annotation @Coat.Config and two method-level annotations @Coat.Param and @Coat.Embedded. The annotations are mandatory, but @Coat.Param and @Coat.Embedded are mutual exclusive.
@Coat.Config Each interface that should be processed by the annotation processor must be annotated with @Coat.Config.
The generated class will always be generated in the same package as the annotated interface.
The name of the generated class is by the default the interface name with Immutable prepended to it.</description></item><item><title>Prerequisites</title><link>https://poiu-de.github.io/coat/docs/quick_start/01_prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/quick_start/01_prerequisites/</guid><description>Coat has no runtime dependencies on other libraries.
The annotation processor has some dependencies on other libraries (which is why it is recommended to use maven as it resolves those dependencies automatically), but none of them are needed at runtime.
Coat can be used with Java 11 or higher.</description></item><item><title>Installation</title><link>https://poiu-de.github.io/coat/docs/quick_start/02_installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/quick_start/02_installation/</guid><description>Coat consists of two separate jars.
The annotation processor to generate the config classes. Only needed at compile time. The runtime package containing the common base class for all generated config classes and the default type converters. Needed at runtime. To use Coat in a maven based project use the following maven coordinates:
1 &amp;lt;!-- Contains the annotation processor. Not needed at runtime. --&amp;gt; 2 &amp;lt;dependency&amp;gt; 3 &amp;lt;groupId&amp;gt;de.poiu.coat&amp;lt;/groupId&amp;gt; 4 &amp;lt;artifactId&amp;gt;coat-processor&amp;lt;/artifactId&amp;gt; 5 &amp;lt;version&amp;gt;0.</description></item><item><title>Nesting Configurations</title><link>https://poiu-de.github.io/coat/docs/user_guide/02_nesting_configurations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/user_guide/02_nesting_configurations/</guid><description>Coat allows embedding config objects in other config objects.
It is helpful in the case when parts of a configuration are reused in multiple other configurations without having to duplicate all the accessor methods of the embedded config class.
Example As an example see the following MqttConfig that is embedded in the main AppConfig.
1@Coat.Config 2public interface MqttConfig { 3 4 @Coat.Param(key = &amp;#34;client_id&amp;#34;) 5 public Optional&amp;lt;String&amp;gt; clientId(); 6 7 @Coat.</description></item><item><title>Usage</title><link>https://poiu-de.github.io/coat/docs/quick_start/03_usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/quick_start/03_usage/</guid><description>Create config interface Write an interface with accessor methods for each config entry your application supports. The accessor methods can return the concrete types you want your config entry to be. There is a number of types that are supported by default, but custom types can be registered to support additional types.
Config values that are optional, must be of type java.util.Optional or the more specialized variants OptionalInt, OptionalLong or OptionalDouble.</description></item><item><title>Validation</title><link>https://poiu-de.github.io/coat/docs/user_guide/03_validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/user_guide/03_validation/</guid><description>The generated config class allows the validation of the configuration with the method validate(). This can be used to fail early in case the given configuration is missing some values or existing values cannot be converted into the specified type.
If the configuration is valid this method just returns.
If the configuration is invalid, it will throw a ConfigValidationException. This exception has a method getValidationResult() that returns a value of type ValidationResult that contains more information about the missing or wrong config values.</description></item><item><title>Supported Types</title><link>https://poiu-de.github.io/coat/docs/user_guide/04_supported_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/user_guide/04_supported_types/</guid><description>Builtin types The following types are supported by Coat out of the box and can directly be used as return types of the accessor methods in the annotated interface.
java.lang.String java.time.Duration java.time.LocalDate java.time.LocalDateTime java.time.LocalTime java.io.File java.nio.file.Path java.nio.charset.Charset java.net.InetAddress java.security.MessageDigest For each supported type a converter class exists in the package de.poiu.coat.convert. Refer to the corresponding Java API docs for details about the expected format of the input string.
The following primitive types are also supported by default.</description></item><item><title>Example config</title><link>https://poiu-de.github.io/coat/docs/user_guide/05_example_config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/user_guide/05_example_config/</guid><description>Example config file generation The annotation processor generates an example config file (according to the specification of Java .properties files) for each annotated interface. That example contains an entry for each accessor method.
If an accessor method is optional, the entry in the example will be commented out.
If an accessor method provides a default value for a property, the entry in the example will be commented out and the default value is assigned.</description></item><item><title>0.0.1</title><link>https://poiu-de.github.io/coat/docs/release_notes/0.0.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/release_notes/0.0.1/</guid><description>First public release.</description></item><item><title>0.0.2</title><link>https://poiu-de.github.io/coat/docs/release_notes/0.0.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/release_notes/0.0.2/</guid><description>CoatConfig#validate() now checks whether config values can be converted to their corresponding type.
The generated config classes now provide a method writeExampleConfig to write an example config (in a syntax valid for Java .properties files) to a provided Writer.
The annotation processor now generates an example .properties file for each annotated interface.
The annotation processor now adds an equals() and hashCode() method to each generated class.
A new annotation @Coat.</description></item><item><title>0.0.3</title><link>https://poiu-de.github.io/coat/docs/release_notes/0.0.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/release_notes/0.0.3/</guid><description>Use java.lang.System.Logger instead of java.util.logging.Logger in CoatConfig.
Correctly handle inherited accessor methods from multiple interfaces.
Accessor methods that are totally equal will only be generated once. Accessor methods that have the same name, but are otherwise not totally equal (e.g. differing return type or differing default value) prevent the generation.
Check that the same key is not used for different accessor methods.
Don't try to generate a config from an interface which has methods that return void or accept parameters (as they can't be used as accessors).</description></item><item><title>Planned Features</title><link>https://poiu-de.github.io/coat/docs/roadmap/01_planned_features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/roadmap/01_planned_features/</guid><description>Support for arrays and collection types At the moment it is not possible to use arrays or collections with generic types in config classes. This is quite some drawback and it is planned to be supported in the future.
Make @Coat.Param annotations optional At the moment every accessor method must be annotated with @Coat.Param to specify the corresponding key. However it should be possible to derive this key from the accessor methods name.</description></item><item><title>Search</title><link>https://poiu-de.github.io/coat/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/search/</guid><description/></item></channel></rss>