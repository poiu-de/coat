<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>User Guide on Coat — Config of Annotated Types</title><link>https://poiu-de.github.io/coat/docs/user_guide/</link><description>Recent content in User Guide on Coat — Config of Annotated Types</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://poiu-de.github.io/coat/docs/user_guide/index.xml" rel="self" type="application/rss+xml"/><item><title>Annotations</title><link>https://poiu-de.github.io/coat/docs/user_guide/01_annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/user_guide/01_annotations/</guid><description>Coat provides three annotations, a type-level annotation @Coat.Config and two method-level annotations @Coat.Param and @Coat.Embedded. The annotations are mandatory, but @Coat.Param and @Coat.Embedded are mutual exclusive.
@Coat.Config Each interface that should be processed by the annotation processor must be annotated with @Coat.Config.
The generated class will always be generated in the same package as the annotated interface.
The name of the generated class is by the default the interface name with Immutable prepended to it.</description></item><item><title>Nesting Configurations</title><link>https://poiu-de.github.io/coat/docs/user_guide/02_nesting_configurations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/user_guide/02_nesting_configurations/</guid><description>Coat allows embedding config objects in other config objects.
It is helpful in the case when parts of a configuration are reused in multiple other configurations without having to duplicate all the accessor methods of the embedded config class.
Example As an example see the following MqttConfig that is embedded in the main AppConfig.
1@Coat.Config 2public interface MqttConfig { 3 4 @Coat.Param(key = &amp;#34;client_id&amp;#34;) 5 public Optional&amp;lt;String&amp;gt; clientId(); 6 7 @Coat.</description></item><item><title>Validation</title><link>https://poiu-de.github.io/coat/docs/user_guide/03_validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/user_guide/03_validation/</guid><description>The generated config class allows the validation of the configuration with the method validate(). This can be used to fail early in case the given configuration is missing some values or existing values cannot be converted into the specified type.
If the configuration is valid this method just returns.
If the configuration is invalid, it will throw a ConfigValidationException. This exception has a method getValidationResult() that returns a value of type ValidationResult that contains more information about the missing or wrong config values.</description></item><item><title>Supported Types</title><link>https://poiu-de.github.io/coat/docs/user_guide/04_supported_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/user_guide/04_supported_types/</guid><description>Builtin types The following types are supported by Coat out of the box and can directly be used as return types of the accessor methods in the annotated interface.
java.lang.String java.time.Duration java.time.LocalDate java.time.LocalDateTime java.time.LocalTime java.io.File java.nio.file.Path java.nio.charset.Charset java.net.InetAddress java.security.MessageDigest For each supported type a converter class exists in the package de.poiu.coat.convert. Refer to the corresponding Java API docs for details about the expected format of the input string.
The following primitive types are also supported by default.</description></item><item><title>Example config</title><link>https://poiu-de.github.io/coat/docs/user_guide/05_example_config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/docs/user_guide/05_example_config/</guid><description>Example config file generation The annotation processor generates an example config file (according to the specification of Java .properties files) for each annotated interface. That example contains an entry for each accessor method.
If an accessor method is optional, the entry in the example will be commented out.
If an accessor method provides a default value for a property, the entry in the example will be commented out and the default value is assigned.</description></item></channel></rss>